package edu.ty.foodapplicationproject.Controller;

import java.util.ArrayList;
import java.util.List;
import java.util.Scanner;

import javax.persistence.EntityManager;
import javax.persistence.EntityManagerFactory;
import javax.persistence.EntityTransaction;
import javax.persistence.Persistence;
import javax.persistence.Query;

import edu.ty.foodapplicationproject.model.Branch;
import edu.ty.foodapplicationproject.model.Menu;
import edu.ty.foodapplicationproject.model.User;

public class BranchController {
	Scanner input;
	EntityManagerFactory emf;
	EntityManager em;
	EntityTransaction et;
	
	public BranchController() {
		input = new Scanner(System.in);
		emf = Persistence.createEntityManagerFactory("food_application_project");
		em = emf.createEntityManager();
		et = em.getTransaction();
	}
	
	public List<Branch> addBranches(User user, int count) {
		List<Branch> branches = new ArrayList<Branch>();
		for(int i = 0; i < count ; i++) {
			Branch branch = new Branch();
			System.out.println("Enter the branch name");
			 String name = input.nextLine();			 
			 System.out.println("Enter the branch address");
			 String address = input.nextLine();
			 System.out.println("Enter the branch phone number");
			 long phone = input.nextLong();
			 input.nextLine();
			 System.out.println("Enter the branch email");
			 String email = input.nextLine();
			 
			 branch.setName(name);
			 branch.setAddress(address);
			 branch.setEmail(email);
			 branch.setPhoneNumber(phone);			 
			 //Setting User to Branch
			 branch.setUser(user);
			 

			 // putting  the branch in the list
			 branches.add(branch);
			
	 
		}
		return branches;
		
	}
	public void createBranch(User user) {
		System.out.println("How many branches you want to associate with this user");
		 int count = input.nextInt();
		 input.nextLine();
		 List<Branch> branches;
		 branches = addBranches(user, count);
		 user.setBranches(branches); 
		 et.begin();
		 em.merge(user);
		 et.commit();
		 
	}
	public void updateBranch() {
		System.out.println("Enter the branch id");
		long id = input.nextLong();
		input.nextLine();
		Branch branch = em.find(Branch.class, id);
		
		System.out.println("Choose which field you want to update \n 1: name \n 2: address \n 3: phone number \n 4: email");
		int choice = input.nextInt();
		input.nextLine();
		switch (choice) {
		case 1:
		{
			System.out.println("Enter the updated branch name");
			String name = input.nextLine();
			branch.setName(name); 
			break;
		}
		case 2:
		{
			System.out.println("Enter the updated branch address");
			String address = input.nextLine();
			branch.setAddress(address); 
			break;
		}
		case 3:
		{
			System.out.println("Enter the updated branch phone number");
			long phone = input.nextLong();
			branch.setPhoneNumber(phone); 
			break;
		}
		case 4:
		{
			System.out.println("Enter the updated branch phone email");
			String email = input.nextLine();
			branch.setEmail(email); 
			break;
		}
		

		default:
		{
			break;
		}
			
		}
		
		et.begin();
		em.merge(branch);
		et.commit();
		
		
	}
	public void showBranches(User user) {
//	List<Branch> branches = user.getBranches();
//	
//	for(Branch b : branches) {
//		System.out.println("Branch name: " + b.getName() + ", " + "Branch Address: " + b.getAddress() + ", " + "Phone number: " + b.getPhoneNumber()
//		+ ", " + "Email: " + b.getEmail());
//	}
		Query query = em.createQuery("Select b from Branch b"); 
		List<Branch> branches =  query.getResultList();
		for(Branch b : branches ) {
			User tempUser = b.getUser();
			if(tempUser.getId() == user.getId()) {
				System.out.println("Branch name: " + b.getName() + ", " + "Branch Address: " + b.getAddress() + ", " + "Phone number: " + b.getPhoneNumber());
			}
		}
		
	}
	public void deleteBranch() {
		System.out.println("Enter the branch id you delete ");
		 long id = input.nextLong();
		 input.nextLine();
		 
		 Branch branch =em.find(Branch.class, id);
		 et.begin();
		 em.remove(branch);
		 et.commit();
		 
	}
}
